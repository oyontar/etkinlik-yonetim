// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  USER
  ADMIN
}

enum EventStatus {
  PENDING
  APPROVED
  REJECTED
}

model User {
  id               String         @id @default(cuid())
  email            String         @unique
  password         String
  role             Role           @default(USER)
  profile          Profile?
  eventsCreated    Event[]        @relation("OrganizerEvents")
  registrations    Registration[]
  messagesSent     Message[]      @relation("SentMessages")
  messagesReceived Message[]      @relation("ReceivedMessages")

  //NextAuth
  accounts Account[]
  sessions Session[]
}

model Profile {
  id     String  @id @default(cuid())
  userId String  @unique
  name   String
  bio    String?
  user   User    @relation(fields: [userId], references: [id])
}

model Category {
  id     String  @id @default(cuid())
  name   String  @unique
  events Event[]
}

model Event {
  id            String         @id @default(cuid())
  title         String
  description   String
  date          DateTime
  status        EventStatus    @default(PENDING)
  organizer     User           @relation("OrganizerEvents", fields: [organizerId], references: [id])
  organizerId   String
  category      Category       @relation(fields: [categoryId], references: [id])
  categoryId    String
  registrations Registration[]
}

model Registration {
  id      String @id @default(cuid())
  event   Event  @relation(fields: [eventId], references: [id])
  eventId String
  user    User   @relation(fields: [userId], references: [id])
  userId  String
}

model Message {
  id         String   @id @default(cuid())
  content    String
  timestamp  DateTime @default(now())
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
  senderId   String
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId String
}

// ─── NextAuth Modelleri ───────────────────────────────────────────────────────
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

